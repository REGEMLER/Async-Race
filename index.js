(()=>{"use strict";var n={523:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,":root {\n    --bg: #2e0839;\n    --green: #1ae746;\n    --red: #d71414;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    scroll-behavior: smooth; \n}\n\nbody {\n    width: 100vw;\n    margin: 0 auto;\n    background-color: #2e0839;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    overflow-x: hidden;\n}\n\n.title {\n    max-width: 90%;\n    margin: 10px auto; \n    font-size: 2rem;\n    text-align: center;\n}\n\n.subtitle {\n    max-width: 90%;\n    margin: 10px auto; \n    font-size: 1.3rem;\n    text-align: center;\n    color: white;\n}\n\n.btn {\n    display: block;\n    width: 150px;\n    margin: 10px auto;\n    height: 40px;\n    padding: 5px;\n    border-radius: 3px;\n    font-size: 1.3rem;\n    font-weight: 700;\n    text-align: center;\n    color: white;\n    cursor: pointer;\n    transition: all linear .5s;\n}\n\n.btn:active {\n    transform: scale(0.95);\n}\n\n.input-text {\n    display: block;\n    max-width: 70%;\n    width: 200px;\n    height: 40px;\n    background-color: white;\n    font-size: 1.2rem;\n    color: var(--green);\n    transition: all linear .4s;\n}\n\n.input-text:focus {\n    border-radius: 6px;\n    outline: 2px solid var(--green);\n}\n\n.input-text:disabled {\n    background-color: gray;\n}\n\n.input-color {\n    display: block;\n    width: 40px;\n    height: 40px;\n}\n\n.footer {\n    max-width: 30%;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n@media screen and (max-width: 700px){\n    .btn {\n        font-size: 1.2rem;\n        font-weight: 500;\n    }\n    .input-text {\n        max-width: 60%;\n        width: 150px;\n    }\n}","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,yBAAyB;IACzB,4DAA4D;IAC5D,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,iBAAiB;IACjB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,0BAA0B;AAC9B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,cAAc;IACd,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,uBAAuB;IACvB,iBAAiB;IACjB,mBAAmB;IACnB,0BAA0B;AAC9B;;AAEA;IACI,kBAAkB;IAClB,+BAA+B;AACnC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,cAAc;IACd,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI;QACI,iBAAiB;QACjB,gBAAgB;IACpB;IACA;QACI,cAAc;QACd,YAAY;IAChB;AACJ",sourcesContent:[":root {\r\n    --bg: #2e0839;\r\n    --green: #1ae746;\r\n    --red: #d71414;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    outline: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    scroll-behavior: smooth; \r\n}\r\n\r\nbody {\r\n    width: 100vw;\r\n    margin: 0 auto;\r\n    background-color: #2e0839;\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    overflow-x: hidden;\r\n}\r\n\r\n.title {\r\n    max-width: 90%;\r\n    margin: 10px auto; \r\n    font-size: 2rem;\r\n    text-align: center;\r\n}\r\n\r\n.subtitle {\r\n    max-width: 90%;\r\n    margin: 10px auto; \r\n    font-size: 1.3rem;\r\n    text-align: center;\r\n    color: white;\r\n}\r\n\r\n.btn {\r\n    display: block;\r\n    width: 150px;\r\n    margin: 10px auto;\r\n    height: 40px;\r\n    padding: 5px;\r\n    border-radius: 3px;\r\n    font-size: 1.3rem;\r\n    font-weight: 700;\r\n    text-align: center;\r\n    color: white;\r\n    cursor: pointer;\r\n    transition: all linear .5s;\r\n}\r\n\r\n.btn:active {\r\n    transform: scale(0.95);\r\n}\r\n\r\n.input-text {\r\n    display: block;\r\n    max-width: 70%;\r\n    width: 200px;\r\n    height: 40px;\r\n    background-color: white;\r\n    font-size: 1.2rem;\r\n    color: var(--green);\r\n    transition: all linear .4s;\r\n}\r\n\r\n.input-text:focus {\r\n    border-radius: 6px;\r\n    outline: 2px solid var(--green);\r\n}\r\n\r\n.input-text:disabled {\r\n    background-color: gray;\r\n}\r\n\r\n.input-color {\r\n    display: block;\r\n    width: 40px;\r\n    height: 40px;\r\n}\r\n\r\n.footer {\r\n    max-width: 30%;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n}\r\n\r\n@media screen and (max-width: 700px){\r\n    .btn {\r\n        font-size: 1.2rem;\r\n        font-weight: 500;\r\n    }\r\n    .input-text {\r\n        max-width: 60%;\r\n        width: 150px;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},412:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,".car {\n    max-width: 95%;\n    margin: 10px auto;\n    display: flex;\n    flex-direction: column;\n}\n\n.line1 {\n    max-width: 40%;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 10px;\n}\n\n.car-btn {\n    background-color: var(--green);\n}\n\n.car-title {\n    max-width: 90%;\n    font-size: 1.5rem;\n    color: var(--green);\n}\n\n.line2 {\n    max-width: 95%;\n    border-bottom: 2px dashed var(--red);\n    position: relative;\n}\n\n.engine-btn {\n    display: inline-block;\n    width: 50px;\n    margin-right: 10px;\n    background-color: var(--red);\n}\n\n.engine-btn:disabled {\n    background-color: gray;\n    color:  black;\n}\n\n.car-img {\n    position: absolute;\n    bottom: -15px;\n    left: 70px;\n    transition: all linear .5s;\n}\n\n.flag {\n    position: absolute;\n    bottom: 0;\n    right: 5px;\n}","",{version:3,sources:["webpack://./src/view/cars/cars.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,iBAAiB;IACjB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,cAAc;IACd,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,SAAS;AACb;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,oCAAoC;IACpC,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,UAAU;IACV,0BAA0B;AAC9B;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;AACd",sourcesContent:[".car {\r\n    max-width: 95%;\r\n    margin: 10px auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.line1 {\r\n    max-width: 40%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    gap: 10px;\r\n}\r\n\r\n.car-btn {\r\n    background-color: var(--green);\r\n}\r\n\r\n.car-title {\r\n    max-width: 90%;\r\n    font-size: 1.5rem;\r\n    color: var(--green);\r\n}\r\n\r\n.line2 {\r\n    max-width: 95%;\r\n    border-bottom: 2px dashed var(--red);\r\n    position: relative;\r\n}\r\n\r\n.engine-btn {\r\n    display: inline-block;\r\n    width: 50px;\r\n    margin-right: 10px;\r\n    background-color: var(--red);\r\n}\r\n\r\n.engine-btn:disabled {\r\n    background-color: gray;\r\n    color:  black;\r\n}\r\n\r\n.car-img {\r\n    position: absolute;\r\n    bottom: -15px;\r\n    left: 70px;\r\n    transition: all linear .5s;\r\n}\r\n\r\n.flag {\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 5px;\r\n}"],sourceRoot:""}]);const s=i},916:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,".prev {\n    background-color: var(--red);\n    color: white;\n}\n\n.next {\n    background-color: var(--green);\n    color: white;\n}\n\n.prev:disabled,\n.next:disabled {\n    background-color: gray;\n    color: black;\n}","",{version:3,sources:["webpack://./src/view/footer/footer.css"],names:[],mappings:"AAAA;IACI,4BAA4B;IAC5B,YAAY;AAChB;;AAEA;IACI,8BAA8B;IAC9B,YAAY;AAChB;;AAEA;;IAEI,sBAAsB;IACtB,YAAY;AAChB",sourcesContent:[".prev {\r\n    background-color: var(--red);\r\n    color: white;\r\n}\r\n\r\n.next {\r\n    background-color: var(--green);\r\n    color: white;\r\n}\r\n\r\n.prev:disabled,\r\n.next:disabled {\r\n    background-color: gray;\r\n    color: black;\r\n}"],sourceRoot:""}]);const s=i},108:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,".garage {\n    width: 100%;\n}\n\n.garage-title {\n    color: var(--green);\n}\n\n.form {\n    max-width: 35%;\n    display: flex;\n    flex-direction: column;\n    margin: 10px 0 10px 10px;\n}\n\n.form-item {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 10px;\n}\n\n#race,\n#create,\n#update,\n#generate {\n    background-color: var(--green);\n}\n\n#reset {\n    background-color: var(--red);\n}\n\n#race:disabled,\n#reset:disabled,\n#update:disabled {\n    background-color: gray;\n    color: black;\n    cursor: auto;\n}\n\n#generate {\n    width: 240px;\n}\n\n@media screen and (max-width: 1160px){\n    .form {\n        max-width: 50%;\n    }\n}\n\n@media screen and (max-width: 820px){\n    .form {\n        max-width: 80%;\n    }\n}","",{version:3,sources:["webpack://./src/view/garage/garage.css"],names:[],mappings:"AAAA;IACI,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,sBAAsB;IACtB,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,SAAS;AACb;;AAEA;;;;IAII,8BAA8B;AAClC;;AAEA;IACI,4BAA4B;AAChC;;AAEA;;;IAGI,sBAAsB;IACtB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI;QACI,cAAc;IAClB;AACJ;;AAEA;IACI;QACI,cAAc;IAClB;AACJ",sourcesContent:[".garage {\r\n    width: 100%;\r\n}\r\n\r\n.garage-title {\r\n    color: var(--green);\r\n}\r\n\r\n.form {\r\n    max-width: 35%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 10px 0 10px 10px;\r\n}\r\n\r\n.form-item {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    gap: 10px;\r\n}\r\n\r\n#race,\r\n#create,\r\n#update,\r\n#generate {\r\n    background-color: var(--green);\r\n}\r\n\r\n#reset {\r\n    background-color: var(--red);\r\n}\r\n\r\n#race:disabled,\r\n#reset:disabled,\r\n#update:disabled {\r\n    background-color: gray;\r\n    color: black;\r\n    cursor: auto;\r\n}\r\n\r\n#generate {\r\n    width: 240px;\r\n}\r\n\r\n@media screen and (max-width: 1160px){\r\n    .form {\r\n        max-width: 50%;\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 820px){\r\n    .form {\r\n        max-width: 80%;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},712:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,".modal {\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 20;\n    background-color: rgba(218, 228, 228, 0.6);\n}\n\n.modal_inner {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 65%;\n    margin: 0 auto;\n    min-height: 200px;\n    padding: 2rem;\n    background-color: var(--green);\n    color: white;\n    border-radius: 40px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 2rem;\n    position: relative;\n}","",{version:3,sources:["webpack://./src/view/modal/modal.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,WAAW;IACX,0CAA0C;AAC9C;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,UAAU;IACV,cAAc;IACd,iBAAiB;IACjB,aAAa;IACb,8BAA8B;IAC9B,YAAY;IACZ,mBAAmB;IACnB,wEAAwE;IACxE,eAAe;IACf,kBAAkB;AACtB",sourcesContent:[".modal {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 20;\r\n    background-color: rgba(218, 228, 228, 0.6);\r\n}\r\n\r\n.modal_inner {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 65%;\r\n    margin: 0 auto;\r\n    min-height: 200px;\r\n    padding: 2rem;\r\n    background-color: var(--green);\r\n    color: white;\r\n    border-radius: 40px;\r\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\r\n    font-size: 2rem;\r\n    position: relative;\r\n}"],sourceRoot:""}]);const s=i},446:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,"#root {\n    position: relative;\n    overflow-x: hidden;\n}\n\n#header {\n    max-width: 40%;\n    margin: 10px;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 10px;\n}\n\n#main {\n    max-width: 95%;\n    margin: 10px auto;\n    padding: 10px;\n}\n\n.header-btn {\n    background-color: var(--green);\n}\n\n.header-btn-passive {\n    background-color: var(--red);\n}","",{version:3,sources:["webpack://./src/view/root/root.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,SAAS;AACb;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,4BAA4B;AAChC",sourcesContent:["#root {\r\n    position: relative;\r\n    overflow-x: hidden;\r\n}\r\n\r\n#header {\r\n    max-width: 40%;\r\n    margin: 10px;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    gap: 10px;\r\n}\r\n\r\n#main {\r\n    max-width: 95%;\r\n    margin: 10px auto;\r\n    padding: 10px;\r\n}\r\n\r\n.header-btn {\r\n    background-color: var(--green);\r\n}\r\n\r\n.header-btn-passive {\r\n    background-color: var(--red);\r\n}"],sourceRoot:""}]);const s=i},928:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,".winners {\n    width: 100%;\n}\n\n.winners-title {\n    color: var(--red);\n}\n\n.winners-table {\n    max-width: 70%;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    text-align: center;\n}\n\n.table-header {\n    width: 100%;\n    margin: 0 auto;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    font-size: 1.3rem;\n    color: white;\n    background-color: var(--red);\n}\n\n.table-item {\n    width: 100%;\n    margin: 0 auto;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    font-size: 1.2rem;\n    color: white;\n    background-color: transparent;\n}\n\n.winner-item1 {\n    flex-basis: 10%;\n}\n\n.winner-item2 {\n    flex-basis: 10%;\n}\n\n.winner-item3 {\n    flex-basis: 35%;\n}\n\n.winner-item4 {\n    flex-basis: 12%;\n}\n\n.winner-item5 {\n    flex-basis: 33%;\n}\n\n.wins,\n.time,\n.num {\n    cursor: pointer;\n}\n\n@media screen and (max-width: 700px){\n    .table-header {\n        font-size: 1rem;\n    }\n    \n    .table-item {\n        font-size: 1rem;\n    }\n}","",{version:3,sources:["webpack://./src/view/winners/winners.css"],names:[],mappings:"AAAA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,iBAAiB;IACjB,YAAY;IACZ,4BAA4B;AAChC;;AAEA;IACI,WAAW;IACX,cAAc;IACd,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;AACjC;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;;;IAGI,eAAe;AACnB;;AAEA;IACI;QACI,eAAe;IACnB;;IAEA;QACI,eAAe;IACnB;AACJ",sourcesContent:[".winners {\r\n    width: 100%;\r\n}\r\n\r\n.winners-title {\r\n    color: var(--red);\r\n}\r\n\r\n.winners-table {\r\n    max-width: 70%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    text-align: center;\r\n}\r\n\r\n.table-header {\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    font-size: 1.3rem;\r\n    color: white;\r\n    background-color: var(--red);\r\n}\r\n\r\n.table-item {\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    font-size: 1.2rem;\r\n    color: white;\r\n    background-color: transparent;\r\n}\r\n\r\n.winner-item1 {\r\n    flex-basis: 10%;\r\n}\r\n\r\n.winner-item2 {\r\n    flex-basis: 10%;\r\n}\r\n\r\n.winner-item3 {\r\n    flex-basis: 35%;\r\n}\r\n\r\n.winner-item4 {\r\n    flex-basis: 12%;\r\n}\r\n\r\n.winner-item5 {\r\n    flex-basis: 33%;\r\n}\r\n\r\n.wins,\r\n.time,\r\n.num {\r\n    cursor: pointer;\r\n}\r\n\r\n@media screen and (max-width: 700px){\r\n    .table-header {\r\n        font-size: 1rem;\r\n    }\r\n    \r\n    .table-item {\r\n        font-size: 1rem;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=o[A]||0,d="".concat(A," ").concat(l);o[A]=l+1;var u=t(d),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var p=a(m,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=r(n,a),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(72),e=t.n(n),r=t(825),a=t.n(r),o=t(659),i=t.n(o),s=t(56),c=t.n(s),A=t(540),l=t.n(A),d=t(113),u=t.n(d),m=t(523),p={};p.styleTagTransform=u(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=l(),e()(m.A,p),m.A&&m.A.locals&&m.A.locals;var g=t(446),f={};f.styleTagTransform=u(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),e()(g.A,f),g.A&&g.A.locals&&g.A.locals;var C=t(108),I={};I.styleTagTransform=u(),I.setAttributes=c(),I.insert=i().bind(null,"head"),I.domAPI=a(),I.insertStyleElement=l(),e()(C.A,I),C.A&&C.A.locals&&C.A.locals;const b=7;function h(){return localStorage.getItem("garagePage")||"1"}async function B(){const n=h(),{totalCount:e}=await y(),t=Math.ceil(Number(e)/b);return Number(n)>=t}function x(){const n=h();return Number(n)<=1}async function w(){const n=h();if(await B())return;const e=Number(n)+1;localStorage.setItem("garagePage",String(e)),O()}function v(){const n=h();if(x())return;const e=Number(n)-1;localStorage.setItem("garagePage",String(e)),O()}async function y(){const n=h(),e=await fetch(`http://127.0.0.1:3000/garage?_page=${n}&_limit=7`),t=await e.json();let r="0";if(e.headers.has("X-Total-Count")){const n=e.headers.get("X-Total-Count");n&&(r=n)}return{cars:t,totalCount:r}}var E=t(412),k={};async function S(n){const e=await fetch(`http://127.0.0.1:3000/garage/${n}`,{method:"GET",headers:{Accept:"application/json"}});return 200===e.status?await e.json():(console.log("Error! There is no car!"),null)}async function T(n,e){const t=await fetch(`http://127.0.0.1:3000/engine/?id=${n}&status=${e}`,{method:"PATCH"});return 200===t.status?await t.json():null}async function L(n){const e=n.querySelector(".start"),t=n.querySelector(".stop"),r=n.querySelector(".car-img"),a=Number(n.id),o=document.querySelector(".flag").getBoundingClientRect(),i=o.x-o.width;e.disabled=!0,t.disabled=!1;const s=await T(a,"started");if(s){const n=s.distance/s.velocity,e=function(n,e,t){const r=[{left:"70px"},{left:"20%"},{left:"40%"},{left:"60%"},{left:`${t}px`}],a={duration:e,easing:"linear",fill:"both"};return n.animate(r,a)}(r,n,i),t=await async function(n){const e=await fetch(`http://127.0.0.1:3000/engine/?id=${n}&status=drive`,{method:"PATCH"});return 500===e.status?(console.log("Your car has been broken down!"),!1):200===e.status&&(await e.json()).success}(a);return t||e.pause(),{time:n,id:a,isDrive:t}}return null}async function M(n){const e=n.querySelector(".start"),t=n.querySelector(".stop"),r=n.querySelector(".car-img"),a=Number(n.id),o=r.getBoundingClientRect().x-r.getBoundingClientRect().width;e.disabled=!1,t.disabled=!0,await T(a,"stopped")&&function(n,e){const t=[{left:`${e}px`},{left:"70px"}];n.animate(t,{duration:500,easing:"ease-in-out",fill:"both"})}(r,o)}function j(n,e,t,r){return`<svg class="${r}" width="${e}px" height="${t}px" viewBox="0 0 24 24">\n    <defs><style>.cls-1{fill:black;stroke:#020202;stroke-miterlimit:10;stroke-width:1.91px;}</style></defs>\n    <circle class="cls-1" cx="6.27" cy="15.84" r="1.91"/>\n    <circle class="cls-1" cx="17.73" cy="15.84" r="1.91"/>\n    <line class="cls-1" x1="15.82" y1="15.84" x2="8.18" y2="15.84"/>\n    <path style="fill:${n};" class="cls-1" d="M4.36,15.84H1.5V13a1.9,1.9,0,0,1,1.91-1.91h1L5.48,8.83A2.87,2.87,0,0,1,8,7.25h7.3A2.84,2.84,0,0,1,17.63,8.4l2,2.67h.95A1.9,1.9,0,0,1,22.5,13v2.86H19.64"/>\n    <line class="cls-1" x1="4.36" y1="11.07" x2="19.64" y2="11.07"/><line class="cls-1" x1="11.05" y1="7.25" x2="11.05" y2="11.07"/>\n    </svg>`}function Y(n,e,t){const r=document.createElement("div");r.id=t.toString(),r.classList.add("car");const a=`\n    <div class="line1">\n        <button class="btn car-btn select">Select</button>\n        <button class="btn car-btn remove">Remove</button>\n        <h3 class="car-title">${n}</h3>\n    </div>\n    <div class="line2">\n        <button class="btn engine-btn start">A</button>\n        <button class="btn engine-btn stop" disabled>B</button>\n        ${j(e,"200","80","car-img")};\n        <svg height="70px" width="80px" class="flag" version="1.1"" \n    viewBox="0 0 206.505 206.505" xml:space="preserve">\n    <g>\n   <path style="fill:#FF0000;" d="M167.069,16.354c-0.426,0.186-43.29,18.671-70.274-4.481c-31.021-26.619-60.722-0.2-61.012,0.072\n       L34.623,13l-0.179,193.494l7.108,0.011l0.115-122.594c5.157-4.091,27.11-19.086,50.498,0.988\n       c30.356,26.047,75.839,6.438,77.765,5.59l2.133-0.938V14.153L167.069,16.354z M164.943,84.824\n       c-8.997,3.389-44.603,14.874-68.148-5.322c-10.375-8.904-20.6-11.871-29.629-11.871c-10.815,0-19.923,4.266-25.489,7.702\n       l0.047-59.101c5.264-4.169,27.142-18.961,50.44,1.034c24.855,21.323,59.863,12.043,72.78,7.516V84.824z"/>\n    </g>\n</svg>;\n    </div>\n    `;r.innerHTML=a;const o=r.querySelector(".remove");o instanceof HTMLButtonElement&&function(n,e){n.addEventListener("click",(()=>{!async function(n){const e=await fetch(`http://127.0.0.1:3000/garage/${n}`,{method:"DELETE",headers:{Accept:"application/json"}});200===e.status?(await e.json(),await async function(n){200===(await fetch(`http://127.0.0.1:3000/winners/${n}`,{method:"DELETE",headers:{Accept:"application/json"}})).status?console.log("The winner was successfully deleted"):console.log("Error! The winner was not successfully deleted")}(n),O()):console.log("Error! Car was not deleted!")}(e)}))}(o,t);const i=r.querySelector(".select");return i instanceof HTMLButtonElement&&async function(n,e){const t=await S(e);n.addEventListener("click",(()=>{const n=document.getElementById("updateName"),e=document.getElementById("updateColor"),r=document.getElementById("update"),a=document.createElement("button");a.classList.add("btn"),a.id="update",a.textContent="Update",n instanceof HTMLInputElement&&t&&(n.disabled=!1,n.value=t.name),e instanceof HTMLInputElement&&t&&(e.disabled=!1,e.value=t.color),r instanceof HTMLButtonElement&&t&&(r.replaceWith(a),a.addEventListener("click",function(n){return()=>{const e=document.getElementById("updateName"),t=document.getElementById("updateColor");let r="",a="";e instanceof HTMLInputElement&&(r=e.value),t instanceof HTMLInputElement&&(a=t.value),r&&a&&async function(n,e,t){200===(await fetch(`http://127.0.0.1:3000/garage/${n}`,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:e,color:t})})).status?O():console.log("Error! Car was not updated!")}(n,r,a)}}(t.id)))}))}(i,t),async function(n){const e=n.querySelector(".start");e instanceof HTMLButtonElement&&e.addEventListener("click",await async function(n){return async()=>{L(n)}}(n))}(r),async function(n){const e=n.querySelector(".stop");e instanceof HTMLButtonElement&&e.addEventListener("click",await async function(n){return async()=>{M(n)}}(n))}(r),r}k.styleTagTransform=u(),k.setAttributes=c(),k.insert=i().bind(null,"head"),k.domAPI=a(),k.insertStyleElement=l(),e()(E.A,k),E.A&&E.A.locals&&E.A.locals;var $=t(916),P={};async function H(n,e){const t=document.createElement("footer");t.classList.add("footer");const r=document.createElement("button");r.classList.add("btn"),r.classList.add("prev"),r.textContent="Prev",r.disabled=n();const a=document.createElement("button");a.classList.add("btn"),a.classList.add("next"),a.textContent="Next";const o=await e();return a.disabled=o,t.append(r),t.append(a),t}function N(n){const e=document.querySelector("footer");if(e){const t=e.querySelector(".prev");t instanceof HTMLButtonElement&&t.addEventListener("click",n)}}function z(n){const e=document.querySelector("footer");if(e){const t=e.querySelector(".next");t instanceof HTMLButtonElement&&t.addEventListener("click",n)}}P.styleTagTransform=u(),P.setAttributes=c(),P.insert=i().bind(null,"head"),P.domAPI=a(),P.insertStyleElement=l(),e()($.A,P),$.A&&$.A.locals&&$.A.locals;const q=[{name:"Volvo",type:["S60","S60 Cross","S90","V40 Cross","V40","V60","V60 Polestar","V90","XC40","C40"]},{name:"Mercedes",type:["AMG GT","GLA","Maybach","S-class","A-class","AMG","CLA","GT Liftback","E-class","V-class"]},{name:"Ford",type:["Aerostar","Aspire","Bantam","B-MAX","Bronco II","C-MAX","Contour","Corcel","Focus","Bronco I"]},{name:"Fiat",type:["Cinquecento","Doblo","Ducato","130","500","Panda","Siena","Tipo","Uno","Ritmo"]},{name:"BMW",type:["X7","X6","X5","X4","X3","X2","X1","XM","Long","GT"]},{name:"Toyota",type:["Camry","C-HR","RAV4","Fortuner","Alphard","Corolla","Vitz","Harrier","Wish","Aqua"]},{name:"Opel",type:["Corsa","Astra","Insignia","Vivaro","Zafira","Movano","Combo","Crossland","Agila","Mokka"]},{name:"Volkswagen",type:["Caddy","Crafter","CrossPolo","Jetta","Multivan","Passat","Variant","Tiguan","Golf","Polo"]},{name:"Renault",type:["Logan","Sandero","Duster","Dakar","Kaptur","Koleos","Dokker","Master","ARKANA","STEPWAY"]},{name:"Skoda",type:["Enyaq","Kodiaq","Karoq","Kamiq","Kushaq","Superb","Octavia","Slavia","Rapid","Scala"]}];function R(){const n=Math.floor(0+10*Math.random()),e=Math.floor(0+10*Math.random());return`${q[n].name} ${q[n].type[e]}`}function V(){let n="#";const e=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"];for(let t=0;t<6;t+=1)n+=e.sort((()=>Math.random()-.5))[0];return n}async function U(){const n=[];for(let e=0;e<99;e+=1){const e=R(),t=V();n.push({name:e,color:t})}const e=n.map((n=>fetch("http://127.0.0.1:3000/garage",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:n.name,color:n.color})})));await Promise.all(e),await O()}var W=t(712),X={};async function D(){localStorage.removeItem("reset"),document.getElementById("reset").disabled=!1,document.getElementById("race").disabled=!0;const n=[...document.querySelectorAll(".car")].map((n=>L(n))),e=(await Promise.all(n)).filter((n=>n?.isDrive)).sort(((n,e)=>n.time-e.time))[0];if(console.log(e),e&&!localStorage.getItem("reset")){const n=await S(e.id),t=Math.floor(e.time)/1e3,r=function(n){const e=document.getElementById("root"),t=document.createElement("DIV");return t.classList.add("modal"),t.innerHTML=`\n        <div class="modal_inner">${n}</div>\n        `,e&&(e.append(t),document.body.style.overflowY="hidden"),t}(`${n.name} win for ${t} seconds`);setTimeout((()=>{r.remove(),document.body.style.overflowY=""}),3e3);const a=await fetch("http://127.0.0.1:3000/winners"),o=(await a.json()).find((e=>e.id===n.id));if(o){const e=o.wins+1,r=o.time<=t?o.time:t;!async function(n,e,t){200===(await fetch(`http://127.0.0.1:3000/winners/${n}`,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({wins:e,time:t})})).status?console.log("The winner was successfully updated"):console.log("Error! The winner was not successfully updated")}(n.id,e,r)}else!async function(n,e,t){201===(await fetch("http://127.0.0.1:3000/winners",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({id:n,wins:1,time:t})})).status?console.log("The winner was succesfully created"):console.log("Error! The winner was not succesfully created")}(n.id,0,t)}}async function G(){document.getElementById("reset").disabled=!0,document.getElementById("race").disabled=!1;const n=[...document.querySelectorAll(".car")].map((n=>M(n)));await Promise.all(n),localStorage.setItem("reset","on")}async function O(){const n=document.getElementById("main");if(n){n.innerHTML="";const e=document.createElement("div");e.classList.add("garage");const{cars:t,totalCount:r}=await y(),a=function(){const n=document.createElement("div");return n.classList.add("form"),n.innerHTML='\n        <div class="form-item">\n            <input type="text" class="input-text" id="createName"/>\n            <input type="color" class="input-color" id="createColor"/>\n            <button class="btn" id="create">Create</button>\n        </div>\n        <div class="form-item">\n            <input type="text" class="input-text" id="updateName" disabled/>\n            <input type="color" class="input-color" id="updateColor" disabled/>\n            <button class="btn" id="update" disabled>Update</button>\n        </div>\n        <div class="form-item">\n            <button class="btn" id="race">Race</button>\n            <button class="btn" id="reset" disabled>Reset</button>\n            <button class="btn" id="generate">Generate Cars</button>\n        </div>',n}(),o=function(n){const e=document.createElement("h1");return e.classList.add("title"),e.classList.add("garage-title"),e.textContent=`Garage (${n})`,e}(r),i=function(){const n=h(),e=document.createElement("h2");return e.classList.add("subtitle"),e.textContent=`Page #${n}`,e}(),s=await H(x,B);e.append(a,o,i),t.forEach((n=>{const t=Y(n.name,n.color,n.id);e.append(t)})),e.append(s),n.append(e),function(){const n=document.getElementById("create");n instanceof HTMLButtonElement&&n.addEventListener("click",(()=>{const n=document.getElementById("createName"),e=document.getElementById("createColor");let t="",r="";n instanceof HTMLInputElement&&(t=n.value),e instanceof HTMLInputElement&&(r=e.value),r&&t&&async function(n,e){201===(await fetch("http://127.0.0.1:3000/garage",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:n,color:e})})).status?O():console.log("Error! Car was not created!")}(t,r)}))}(),N(v),z(w),function(){const n=document.getElementById("generate");n instanceof HTMLButtonElement&&n.addEventListener("click",U)}(),function(){const n=document.getElementById("race");n&&n.addEventListener("click",D)}(),function(){const n=document.getElementById("reset");n&&n.addEventListener("click",G)}()}}X.styleTagTransform=u(),X.setAttributes=c(),X.insert=i().bind(null,"head"),X.domAPI=a(),X.insertStyleElement=l(),e()(W.A,X),W.A&&W.A.locals&&W.A.locals;var Z=t(928),J={};function F(){return localStorage.getItem("sort")||"id"}function _(){return localStorage.getItem("order")||"ASC"}function Q(n){const e=n.target,t="ASC"===_()?"DESC":"ASC";e instanceof HTMLDivElement&&(e.classList.contains("wins")?localStorage.setItem("sort","wins"):e.classList.contains("time")?localStorage.setItem("sort","time"):localStorage.setItem("sort","id"),localStorage.setItem("order",t),sn())}J.styleTagTransform=u(),J.setAttributes=c(),J.insert=i().bind(null,"head"),J.domAPI=a(),J.insertStyleElement=l(),e()(Z.A,J),Z.A&&Z.A.locals&&Z.A.locals;const K=10;function nn(){return localStorage.getItem("winnerPage")||"1"}async function en(){const n=nn(),e=F(),t=_(),{totalCount:r}=await on(e,t),a=Math.ceil(Number(r)/K);return Number(n)>=a}function tn(){const n=nn();return Number(n)<=1}async function rn(){const n=nn();if(await en())return;const e=Number(n)+1;localStorage.setItem("winnerPage",String(e)),sn()}function an(){const n=nn();if(tn())return;const e=Number(n)-1;localStorage.setItem("winnerPage",String(e)),sn()}async function on(n,e){const t=nn(),r=await fetch(`http://127.0.0.1:3000/winners?_page=${t}&_limit=10&_sort=${n}&_order=${e}`),a=await r.json();let o="0";if(r.headers.has("X-Total-Count")){const n=r.headers.get("X-Total-Count");n&&(o=n)}return{winners:a,totalCount:o}}async function sn(){const n=document.getElementById("main");if(n){n.innerHTML="";const e=document.createElement("div");e.classList.add("winners");const t=F(),r=_(),a="ASC"===r?"↑":"↓",o="id"===t?a:"",i="wins"===t?a:"",s="time"===t?a:"",{winners:c,totalCount:A}=await on(t,r),l=function(n){const e=document.createElement("h1");return e.classList.add("title"),e.classList.add("winners-title"),e.textContent=`Winners (${n})`,e}(A),d=function(){const n=nn(),e=document.createElement("h2");return e.classList.add("subtitle"),e.textContent=`Page #${n}`,e}(),u=function(n,e,t){const r=document.createElement("div");r.classList.add("winners-table");const a=document.createElement("div");a.classList.add("table-header");const o=`\n    <div class="winner-item1 num">№ ${n}</div>\n    <div class="winner-item2">Car</div>\n    <div class="winner-item3">Name</div>\n    <div class="winner-item4 wins">Wins ${e}</div>\n    <div class="winner-item5 time">Best time(sec) ${t}</div>\n    `;return a.innerHTML=o,r.append(a),r}(o,i,s),m=await H(tn,en);e.append(l,d,u,m),n.append(e);const p=c.map((n=>S(n.id))),g=await Promise.all(p);c.forEach(((n,e)=>{!function(n,e,t,r,a){const o=document.querySelector(".winners-table"),i=document.createElement("div");i.classList.add("table-item");const s=`\n    <div class="winner-item1">${n}</div>\n    <div class="winner-item2">${e}</div>\n    <div class="winner-item3">${t}</div>\n    <div class="winner-item4">${r}</div>\n    <div class="winner-item5">${a}</div>\n    `;i.innerHTML=s,o&&o.append(i)}(n.id,j(`${g[e].color}`,"70","30",""),g[e].name,n.wins,n.time)}))}N(an),z(rn),function(){const n=document.querySelector(".table-header");n&&n.addEventListener("click",Q)}()}!function(){const n=document.createElement("div");n.id="root";const e=document.createElement("header");e.id="header",e.innerHTML='<button class="btn header-btn" id="garage">Garage</button> <button class="btn header-btn-passive" id="winners">Winners</button>';const t=document.createElement("main");t.id="main",n.append(e),n.append(t),document.body.append(n),function(){const n=document.getElementById("garage");n instanceof HTMLButtonElement&&n.addEventListener("click",O)}(),function(){const n=document.getElementById("winners");n instanceof HTMLButtonElement&&n.addEventListener("click",sn)}(),O()}(),window.addEventListener("beforeunload",(()=>{localStorage.clear()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,